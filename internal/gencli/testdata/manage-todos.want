// Code generated. DO NOT EDIT.

package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"os"

	"github.com/golang/protobuf/jsonpb"
	"github.com/spf13/cobra"

	todopb "github.com/googleapis/todo/generated"
)

var ManageTodosFromFile string

var ManageTodosOutFile string

func init() {
	TodoServiceCmd.AddCommand(ManageTodosCmd)

	ManageTodosCmd.Flags().StringVar(&ManageTodosFromFile, "from_file", "", "Absolute path to JSON file containing request payload")

	ManageTodosCmd.Flags().StringVar(&ManageTodosOutFile, "out_file", "", "Absolute path to a file to pipe output to")
	ManageTodosCmd.MarkFlagRequired("out_file")

}

var ManageTodosCmd = &cobra.Command{
	Use:   "manage-todos",
	Short: "manage todos live",
	Long:  "manage todos live by creating and updating todos as they change",
	PreRun: func(cmd *cobra.Command, args []string) {

	},
	RunE: func(cmd *cobra.Command, args []string) (err error) {

		in := os.Stdin
		if ManageTodosFromFile != "" {
			in, err = os.Open(ManageTodosFromFile)
			if err != nil {
				return err
			}
			defer in.Close()

		}

		stream, err := TodoClient.ManageTodos(ctx)

		out, err := os.OpenFile(ManageTodosOutFile, os.O_APPEND|os.O_WRONLY, os.ModeAppend)
		if err != nil {
			return err
		}

		// start background stream receive
		go func() {
			var res *todopb.Todo
			for {
				res, err = stream.Recv()
				if err != nil {
					return
				}

				str := res.String()
				if OutputJSON {
					d, _ := json.MarshalIndent(res, "", "  ")
					str = string(d)
				}
				fmt.Fprintln(out, str)
			}
		}()

		if Verbose {
			fmt.Println("Client stream open. Close with ctrl+D.")
		}

		var ManageTodosInput todopb.Todo
		scanner := bufio.NewScanner(in)
		for scanner.Scan() {
			input := scanner.Text()
			if input == "" {
				continue
			}
			err = jsonpb.UnmarshalString(input, &ManageTodosInput)
			if err != nil {
				return err
			}

			err = stream.Send(&ManageTodosInput)
			if err != nil {
				return err
			}
		}
		if err = scanner.Err(); err != nil {
			return err
		}

		err = stream.CloseSend()

		return err
	},
}
