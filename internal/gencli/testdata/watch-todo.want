// Code generated. DO NOT EDIT.

package main

import (
	"fmt"
	"io"
	"os"

	"github.com/golang/protobuf/jsonpb"
	"github.com/spf13/cobra"

	todopb "github.com/googleapis/todo/generated"
)

var WatchTodoInput todopb.WatchTodoRequest

var WatchTodoFromFile string

func init() {
	TodoServiceCmd.AddCommand(WatchTodoCmd)

	WatchTodoCmd.Flags().Int32Var(&WatchTodoInput.Id, "id", 0, "task to watch")

	WatchTodoCmd.Flags().StringVar(&WatchTodoFromFile, "from_file", "", "Absolute path to JSON file containing request payload")

}

var WatchTodoCmd = &cobra.Command{
	Use:   "watch-todo",
	Short: "watch todo",
	Long:  "watch todo for changes, like completion",
	PreRun: func(cmd *cobra.Command, args []string) {

		if WatchTodoFromFile == "" {

			cmd.MarkFlagRequired("id")

		}

	},
	RunE: func(cmd *cobra.Command, args []string) (err error) {

		in := os.Stdin
		if WatchTodoFromFile != "" {
			in, err = os.Open(WatchTodoFromFile)
			if err != nil {
				return err
			}
			defer in.Close()

			err = jsonpb.Unmarshal(in, &WatchTodoInput)
			if err != nil {
				return err
			}

		}

		if Verbose {
			printVerboseInput("Todo", "WatchTodo", &WatchTodoInput)
		}
		resp, err := TodoClient.WatchTodo(ctx, &WatchTodoInput)

		var item *todopb.Todo
		for {
			item, err = resp.Recv()
			if err != nil {
				break
			}

			if Verbose {
				fmt.Print("Output: ")
			}
			printMessage(item)
		}

		if err == io.EOF {
			return nil
		}

		return err
	},
}
