func (c *fooRESTClient) ServerStreamRPC(ctx context.Context, req *foopb.Foo, opts ...gax.CallOption) (foopb.FooService_ServerStreamRPCClient, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/foo")

	// Build HTTP headers from client and context metadata.
	routingHeadersMap := make(map[string]string)
	if reg := regexp.MustCompile("(.*)"); reg.MatchString(req.GetOther()) && len(url.QueryEscape(reg.FindStringSubmatch(req.GetOther())[1])) > 0 {
		routingHeadersMap["other"] = url.QueryEscape(reg.FindStringSubmatch(req.GetOther())[1])
	}
	var routingHeadersList []string
	headerNames := []string{
		"other",
	}
	for _, h := range headerNames {
		if v, ok := routingHeadersMap[h]; ok {
			routingHeadersList = append(routingHeadersList, fmt.Sprintf("%s=%s", h, v))
		}
	}
	hds := []string{"x-goog-request-params", strings.Join(routingHeadersList, "&")}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	var streamClient *serverStreamRPCRESTStreamClient
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := executeStreamingHTTPRequest(ctx, c.httpClient, httpReq, c.logger, jsonReq, "ServerStreamRPC")
		if err != nil{
			return err
		}

		streamClient = &serverStreamRPCRESTStreamClient{
			ctx: ctx,
			md: metadata.MD(httpRsp.Header),
			stream: gax.NewProtoJSONStreamReader(httpRsp.Body, (&foopb.Foo{}).ProtoReflect().Type()),
		}
		return nil
	}, opts...)

	return streamClient, e
}

// serverStreamRPCRESTStreamClient is the stream client used to consume the server stream created by
// the REST implementation of ServerStreamRPC.
type serverStreamRPCRESTStreamClient struct {
	ctx context.Context
	md metadata.MD
	stream *gax.ProtoJSONStream
}

func (c *serverStreamRPCRESTStreamClient) Recv() (*foopb.Foo, error) {
	if err := c.ctx.Err(); err != nil {
		defer c.stream.Close()
		return nil, err
	}
	msg, err := c.stream.Recv()
	if err != nil {
		defer c.stream.Close()
		return nil, err
	}
	res := msg.(*foopb.Foo)
	return res, nil
}

func (c *serverStreamRPCRESTStreamClient) Header() (metadata.MD, error) {
	return c.md, nil
}

func (c *serverStreamRPCRESTStreamClient) Trailer() metadata.MD {
	return c.md
}

func (c *serverStreamRPCRESTStreamClient) CloseSend() error {
	// This is a no-op to fulfill the interface.
	return errors.New("this method is not implemented for a server-stream")
}

func (c *serverStreamRPCRESTStreamClient) Context() context.Context {
	return c.ctx
}

func (c *serverStreamRPCRESTStreamClient) SendMsg(m interface{}) error {
	// This is a no-op to fulfill the interface.
	return errors.New("this method is not implemented for a server-stream")
}

func (c *serverStreamRPCRESTStreamClient) RecvMsg(m interface{}) error {
	// This is a no-op to fulfill the interface.
	return errors.New("this method is not implemented, use Recv")
}

