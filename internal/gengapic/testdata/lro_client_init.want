// internalFooClient is an interface that defines the methods availaible from Awesome Foo API.
type internalFooClient interface {
	Zip(context.Context, *mypackagepb.Bar, ...gax.CallOption) (*ZipOperation, error)
}

// FooClient is a client for interacting with Awesome Foo API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type FooClient struct {
	// The internal transport-dependent client.
	internalClient internalFooClient

	// The call options for this service.
	CallOptions *FooCallOptions

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient *lroauto.OperationsClient

}

func (c *FooClient) Close () error {
	return c.internalClient.Close()
}

func (c *FooClient) Zip(ctx context.Context, req *mypackagepb.Bar, opts ...gax.CallOption) (*ZipOperation, error) {
	opts = append(c.CallOptions.Zip[0:len(c.CallOptions.Zip):len(c.CallOptions.Zip)], opts...)
	return c.internalClient.Zip(ctx, req, opts)
}


// fooGrpcClient is a client for interacting with Awesome Foo API over gRPC transport.
// It satisfies the internalFooClient interface.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type fooGrpcClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// flag to opt out of default deadlines via GOOGLE_API_GO_EXPERIMENTAL_DISABLE_DEFAULT_DEADLINE
	disableDeadlines bool

	// The gRPC API client.
	fooClient mypackagepb.FooClient

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient *lroauto.OperationsClient

	operationsClient longrunningpb.OperationsClient

	// The x-goog-* metadata to be sent with each request.
	xGoogMetadata metadata.MD
}

// NewFooClient creates a new foo client based on gRPC.
//
// Foo service does stuff.
func NewFooClient(ctx context.Context, opts ...option.ClientOption) (*FooClient, error) {
	clientOpts := defaultFooGrpcClientOptions()
	if newFooGrpcClientHook != nil {
		hookOpts, err := newFooGrpcClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	disableDeadlines, err := checkDisableDeadlines()
	if err != nil {
		return nil, err
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	c := &fooGrpcClient{
		connPool:    connPool,
		disableDeadlines: disableDeadlines,
		fooClient: mypackagepb.NewFooClient(connPool),
	}
	c.setGoogleClientInfo()

	c.LROClient, err = lroauto.NewOperationsClient(ctx, gtransport.WithConnPool(connPool))
	if err != nil {
		// This error "should not happen", since we are just reusing old connection pool
		// and never actually need to dial.
		// If this does happen, we could leak connp. However, we cannot close conn:
		// If the user invoked the constructor with option.WithGRPCConn,
		// we would close a connection that's still in use.
		// TODO: investigate error conditions.
		return nil, err
	}
	c.operationsClient = longrunningpb.NewOperationsClient(connPool)

	return &FooClient{internalFooClient: c, CallOptions: defaultFooCallOptions()}, nil
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *fooGrpcClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *fooGrpcClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", versionGo()}, keyval...)
	kv = append(kv, "gapic", versionClient, "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogMetadata = metadata.Pairs("x-goog-api-client", gax.XGoogHeader(kv...))
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *fooGrpcClient) Close() error {
	return c.connPool.Close()
}

