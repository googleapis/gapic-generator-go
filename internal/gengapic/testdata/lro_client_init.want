// internalFooClient is an interface that defines the methods availaible from Awesome Foo API.
type internalFooClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	Zip(context.Context, *mypackagepb.Bar, ...gax.CallOption) (*ZipOperation, error)
	ZipOperation(name string) *ZipOperation
	ListOperations(context.Context, *longrunningpb.ListOperationsRequest, ...gax.CallOption) (*longrunningpb.ListOperationsResponse, error)
	GetOperation(context.Context, *longrunningpb.GetOperationRequest, ...gax.CallOption) (*GetOperationOperation, error)
	GetOperationOperation(name string) *GetOperationOperation
	DeleteOperation(context.Context, *longrunningpb.DeleteOperationRequest, ...gax.CallOption) error
	CancelOperation(context.Context, *longrunningpb.CancelOperationRequest, ...gax.CallOption) error
	WaitOperation(context.Context, *longrunningpb.WaitOperationRequest, ...gax.CallOption) (*WaitOperationOperation, error)
	WaitOperationOperation(name string) *WaitOperationOperation
}

// FooClient is a client for interacting with Awesome Foo API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
//
// Foo service does stuff.
type FooClient struct {
	// The internal transport-dependent client.
	internalFooClient

	// The call options for this service.
	CallOptions *FooCallOptions

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient *lroauto.OperationsClient

}

// fooGRPCClient is a client for interacting with Awesome Foo API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type fooGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// flag to opt out of default deadlines via GOOGLE_API_GO_EXPERIMENTAL_DISABLE_DEFAULT_DEADLINE
	disableDeadlines bool

	// Points back to the CallOptions field of the containing FooClient
	CallOptions **FooCallOptions

	// The gRPC API client.
	fooClient mypackagepb.FooClient

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient **lroauto.OperationsClient

	operationsClient longrunningpb.OperationsClient

	// The x-goog-* metadata to be sent with each request.
	xGoogMetadata metadata.MD
}

// NewFooClient creates a new foo client based on gRPC.
//
// Foo service does stuff.
func NewFooClient(ctx context.Context, opts ...option.ClientOption) (*FooClient, error) {
	clientOpts := defaultFooGRPCClientOptions()
	if newFooClientHook != nil {
		hookOpts, err := newFooClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	disableDeadlines, err := checkDisableDeadlines()
	if err != nil {
		return nil, err
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := FooClient{CallOptions: defaultFooCallOptions()}

	c := &fooGRPCClient{
		connPool:    connPool,
		disableDeadlines: disableDeadlines,
		fooClient: mypackagepb.NewFooClient(connPool),
		CallOptions: &client.CallOptions,
		operationsClient: longrunningpb.NewOperationsClient(connPool),

	}
	c.setGoogleClientInfo()

	client.internalFooClient = c

	client.LROClient, err = lroauto.NewOperationsClient(ctx, gtransport.WithConnPool(connPool))
	if err != nil {
		// This error "should not happen", since we are just reusing old connection pool
		// and never actually need to dial.
		// If this does happen, we could leak connp. However, we cannot close conn:
		// If the user invoked the constructor with option.WithGRPCConn,
		// we would close a connection that's still in use.
		// TODO: investigate error conditions.
		return nil, err
	}
	c.LROClient = &client.LROClient
	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *fooGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *fooGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", versionGo()}, keyval...)
	kv = append(kv, "gapic", versionClient, "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogMetadata = metadata.Pairs("x-goog-api-client", gax.XGoogHeader(kv...))
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *fooGRPCClient) Close() error {
	return c.connPool.Close()
}

