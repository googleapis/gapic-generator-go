func (c *fooRESTClient) CustomOp(ctx context.Context, req *foopb.Foo, opts ...gax.CallOption) (*Operation, error) {
	baseUrl, _ := url.Parse(c.endpoint)
	baseUrl.Path += fmt.Sprintf("/v1/foo")

	params := url.Values{}
	if req != nil && req.Other != nil {
		params.Add("other", fmt.Sprintf("%v", req.GetOther()))
	}
	params.Add("size", fmt.Sprintf("%v", req.GetSize()))

	baseUrl.RawQuery = params.Encode()

	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &foopb.Operation{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		httpReq, err := http.NewRequest("POST", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		// Set the headers
		for k, v := range c.xGoogMetadata {
			httpReq.Header[k] = v
		}
		httpReq.Header["Content-Type"] = []string{"application/json",}

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil{
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := ioutil.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return maybeUnknownEnum(err)
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	op := &Operation{proto: resp}
	return op, nil
}
