// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package gengapic

import (
	"errors"
	"fmt"
	"path/filepath"
	"sort"
	"strings"
)

// Define a type to represent supported network transports.
type transport int

// Declare the transports we support for generation.
const (
	grpc transport = iota
	rest
)

// static error for the most critical argument
var errInvalidPackageParam = errors.New("need parameter in format: go-gapic-package=client/import/path;packageName")

// Deprecated plugin arguments we want to explicitly error on, so invokers know that the
// option is no longer supported.
var DEPRECATED_ARGS map[string]error = map[string]error{
	"gapic-service-config": fmt.Errorf("removed, use api-service-config instead"),
}

// Supported boolean plugin arguments.
var SUPPORTED_BOOLEAN_ARGS map[string]func() configOption = map[string]func() configOption{
	"metadata":           EnableGAPICMetadata,
	"diregapic":          GenerateAsDIREGAPIC,
	"rest-numeric-enums": EnableRESTNumericEnums,
	"omit-snippets":      EnableOmitSnippets,
}

// Supported value plugin arguments, which are supplied in the form <key>=<value>.
// The supplied string argument corresponds to the value part of the
var SUPPORTED_VALUE_ARGS map[string]func(string) configOption = map[string]func(string) configOption{
	"go-gapic-package":    WithGoGAPICPackage,
	"api-service-config":  WithAPIServiceConfigPath,
	"grpc-service-config": WithGRPCServiceConfigPath,
	"module":              WithModulePrefix,
	"release-level":       WithReleaseLevel,
	"transport":           WithTransports,
}

// Supported prefix args, which bear only a string prefix and all subsequent processing is based on the string.
// This is primarily for doing package overrides, which are of the form:
//
//	Mgoogle/storage/v2/storage.proto=cloud.google.com/go/storage/internal/apiv2/stubs
//
// Recommendation: avoid adding more of these as they complicate processing.
var SUPPORTED_PREFIX_ARGS map[string]func(string) configOption = map[string]func(string) configOption{
	"M": WithPackageOverride,
}

// Configuration needed to drive the operation of the plugin.
// The options should be treated is immutable once instantiated.
// TODO: rename this in a subsequent refactor
type options struct {
	// The fully qualified package path, e.g. "cloud.google.com/go/foo/v1/foopb"
	pkgPath string
	// The package name, e.g. "foopb"
	pkgName string
	// Output directory for the generated artifacts.
	outDir string

	// Should GAPIC metadata be generated
	// TODO: rename this in a subsequent refactor
	metadata bool

	// Are the input artifacts from a DIREGAPIC source
	// TODO: rename this in a subsequent refactor
	diregapic bool

	// Should the generator code generator numeric enums for REST calls
	// TODO: rename this in a subsquent refactor
	restNumericEnum bool

	// should generated snippets be omitted (generated by default)
	// TODO: rename this in a subsequent refactor
	omitSnippets bool

	// path to the API service config
	// TODO: rename and handle parsing during configuration
	serviceConfigPath string

	// path to the GRPC service config (e.g. method retry settings)
	// TODO: rename and handle parsing during configuration
	grpcConfPath string

	// prefix for the enclosing module
	modulePrefix string

	// release level of the generated artifacts
	// TODO: rename this in a subsequent refactor
	relLvl string

	// which network transports are being generated.
	// TODO: rename this and make it easier to get right (likely a map) in a refactor
	transports []transport

	// Package naming overrides, keyed by filepath.
	pkgOverrides map[string]string
}

// Signature for configuration arguments.
// Errors are part of the signature to allow options to provide validation feedback early.
// Config options that return errors should not modify the configuration.
type configOption func(*options) error

// NewOptionsFromParams consumes the "parameter" field from the CodeGenerationRequest to produce a configuration.
// This should be a comma seperated list of plugin arguments, and each one is handled in the order it appears.
func NewOptionsFromParams(generationParameter *string) (*options, error) {
	if generationParameter == nil {
		return nil, fmt.Errorf("generationParameter is nil, cannot configure")
	}

	cfg := &options{}

	// params are comma seperated.  Split and process each individually.
	for _, s := range strings.Split(*generationParameter, ",") {
		// Normalize to ensure we're not dealing with spacing issues.
		pluginArg := strings.TrimSpace(s)

		// Ignore empty args.
		if pluginArg == "" {
			continue
		}

		// Handle deprecated arguments first.
		if err, ok := DEPRECATED_ARGS[pluginArg]; ok {
			return nil, err
		}
		// Handle the boolean keyword args, e.g. non key=value style arguments.
		if o, ok := SUPPORTED_BOOLEAN_ARGS[pluginArg]; ok {
			if err := o()(cfg); err != nil {
				// It's unlikely that any boolean option will surface errors, but we do it here
				// lest we are surprised in the future.
				return nil, fmt.Errorf("plugin arg %q invalid: %w", pluginArg, err)
			}
			continue
		}

		// Handle value args by parsing key=value parts.
		e := strings.IndexByte(pluginArg, '=')
		if e < 0 {
			return nil, fmt.Errorf("invalid plugin option format, must be key=value: %q", pluginArg)
		}
		key, val := pluginArg[:e], pluginArg[e+1:]
		if val == "" {
			return nil, fmt.Errorf("invalid plugin option value, missing value in key=value: %q", pluginArg)
		}

		if valueOpt, ok := SUPPORTED_VALUE_ARGS[key]; ok {
			if err := valueOpt(val)(cfg); err != nil {
				return nil, fmt.Errorf("plugin arg %q invalid: %w", pluginArg, err)
			}
			continue
		}

		// Now, handle prefix args be scanning registered prefixes.
		for prefix, prefixOpt := range SUPPORTED_PREFIX_ARGS {
			if strings.HasPrefix(pluginArg, prefix) {
				prefixLen := len(prefix)
				if err := prefixOpt(pluginArg[prefixLen:])(cfg); err != nil {
					return nil, fmt.Errorf("plugin arg %q invalid: %w", pluginArg, err)
				}
			}
		}

	}
	// Now that all options are processed, normalized and validate.
	if err := validateAndNormalizeConfig(cfg); err != nil {
		return nil, err
	}
	return cfg, nil
}

// This function provides an opportunity to validate that a configuration adheres to expectations
// and the configuration adheres to expectations (e.g. required fields are present, fields with relationships
// are not in conflict).
//
// It also handles cases such as default values (e.g. what transports are enabled) where the configuration is more
// than a simple boolean option.
func validateAndNormalizeConfig(cfg *options) error {
	// Normalize transports.  If no transports are specified, generate gRPC only by default.
	if len(cfg.transports) == 0 {
		cfg.transports = []transport{grpc}
	}

	// REST enums are not supported by DIREGAPIC.
	if cfg.diregapic && cfg.restNumericEnum {
		return fmt.Errorf("incompatible features: diregapic and rest numeric enums")
	}

	// Certain configuration details must be present.
	if cfg.pkgPath == "" || cfg.pkgName == "" || cfg.outDir == "" {
		return errInvalidPackageParam
	}

	if cfg.modulePrefix != "" {
		if !strings.HasPrefix(cfg.outDir, cfg.modulePrefix) {
			return fmt.Errorf("go-gapic-package %q does not match prefix %q", cfg.outDir, cfg.modulePrefix)
		}
		cfg.outDir = strings.TrimPrefix(cfg.outDir, cfg.modulePrefix+"/")
	}

	return nil
}

// WithGoGapicPackage parses the value argument based on the typical
// pattern:
// <packagepath>;<packagename>
// Example:
// cloud.google.com/go/foo/v1/foopb;foopb
func WithGoGAPICPackage(s string) configOption {
	p := strings.IndexByte(s, ';')

	if p < 0 {
		return func(cfg *options) error {
			return errInvalidPackageParam
		}
	}
	return func(cfg *options) error {
		cfg.pkgPath = s[0:p]
		cfg.pkgName = s[p+1:]
		cfg.outDir = filepath.FromSlash(cfg.pkgPath)
		return nil
	}
}

// EnableGAPICMetadata enables generation of GAPIC metadata.
func EnableGAPICMetadata() configOption {
	return func(cfg *options) error {
		cfg.metadata = true
		return nil
	}
}

// GenerateAsDIREGAPIC is a behavioral flag that ensures code generation respects
// special DIREGAPIC constraints.  A DIREGAPIC is a set of input artifacts that were
// reverse-compiled from an API Discovery document, rather than directly from service
// protos (e.g. compute).
func GenerateAsDIREGAPIC() configOption {
	return func(cfg *options) error {
		cfg.diregapic = true
		return nil
	}
}

// EnableRESTNumericEnums is a behavioral flag that causes the generated REST clients
// to send the numeric value for enum fields rather than the string label.
func EnableRESTNumericEnums() configOption {
	return func(cfg *options) error {
		cfg.restNumericEnum = true
		return nil
	}
}

// Should automatic generation of snippets be disabled.
func EnableOmitSnippets() configOption {
	return func(cfg *options) error {
		cfg.omitSnippets = true
		return nil
	}
}

// Specifies the path to the API service config file.
func WithAPIServiceConfigPath(s string) configOption {
	return func(cfg *options) error {
		cfg.serviceConfigPath = s
		return nil
	}
}

// Specifies the path to the gRPC service config file.
func WithGRPCServiceConfigPath(s string) configOption {
	return func(cfg *options) error {
		cfg.grpcConfPath = s
		return nil
	}
}

// Specifies the module prefix.
func WithModulePrefix(s string) configOption {
	return func(cfg *options) error {
		cfg.modulePrefix = s
		return nil
	}
}

// Specifies the release level of the generated artifacts.
func WithReleaseLevel(s string) configOption {
	return func(cfg *options) error {
		// TODO: this should be validated against a well defined set of levels
		cfg.relLvl = s
		return nil
	}
}

// WithPackageOverride handles a package naming override.
// The `M` prefix is not passed as part of the string, only the remaining substring.
func WithPackageOverride(s string) configOption {
	e := strings.IndexByte(s, '=')
	if e < 0 {
		return func(cfg *options) error {
			return fmt.Errorf("invalid package override format, should be <file>=<renamed file>: %q", s)
		}
	}
	key, val := s[:e], s[e+1:]
	if val == "" {
		return func(cfg *options) error {
			return fmt.Errorf("invalid plugin option value, missing value in key=value: %q", s)
		}
	}
	return func(cfg *options) error {
		if cfg.pkgOverrides == nil {
			cfg.pkgOverrides = make(map[string]string)
		}
		cfg.pkgOverrides[key] = val
		return nil
	}
}

// Utility function for stringifying the Transport enum
func (t transport) String() string {
	switch t {
	case grpc:
		return "grpc"
	case rest:
		return "rest"
	default:
		// Add new transport variants as need be.
		return fmt.Sprintf("%d", int(t))
	}
}

// Specifies the requested network transports to generate.
func WithTransports(s string) configOption {
	transports := map[transport]bool{}
	for _, t := range strings.Split(s, "+") {
		switch t {
		case "grpc":
			transports[grpc] = true
		case "rest":
			transports[rest] = true
		default:
			return func(cfg *options) error {
				return fmt.Errorf("invalid transport option: %q", t)
			}
		}

	}
	return func(cfg *options) error {
		for t := range transports {
			cfg.transports = append(cfg.transports, t)
		}
		// TODO: remove this after refactor, its a weak expectation
		sort.Slice(cfg.transports, func(i, j int) bool {
			return cfg.transports[i] < cfg.transports[j]
		})
		return nil
	}
}
