version: 2
workflows:
  version: 2
  build_test_publish:
    jobs:
      - build:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$|^v\d+\.\d+\.\d+-[a-z]+$/
      - format:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$|^v\d+\.\d+\.\d+-[a-z]+$/
      - bazel-test:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$|^v\d+\.\d+\.\d+-[a-z]+$/
      - release:
          requires:
            - build
            - format
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+\.\d+\.\d+$|^v\d+\.\d+\.\d+-[a-z]+$/
jobs:
  format:
    docker:
      - image: circleci/golang:1.13
    steps:
      - checkout
      - run:
          name: Check Format
          command: "! go fmt ./... 2>&1 | read"
  build:
    docker:
      - image: circleci/golang:1.13
    steps:
      - checkout
      - run: go test ./...
      - run:
          name: Check license
          command: go run ./util/cmd/license
      - run: go install github.com/googleapis/gapic-generator-go/cmd/protoc-gen-go_gapic
      - run: go install github.com/golang/protobuf/protoc-gen-go
      - run:
          name: verify error conformance
          command: |
            go install github.com/googleapis/gapic-config-validator/cmd/gapic-error-conformance
            gapic-error-conformance -plugin=protoc-gen-go_gapic -plugin_opts="go-gapic-package=foo.com/bar/v1;bar"
      # Install protoc, showcase.bash needs it
      - run:
          name: Run Showcase
          command: |
            mkdir protobuf
            curl -sSL https://github.com/protocolbuffers/protobuf/releases/download/v3.12.0/protoc-3.12.0-linux-x86_64.zip > protobuf/protoc.zip
            unzip -d protobuf protobuf/protoc.zip
            export PATH=$PATH:$(pwd)/protobuf/bin            
            make test
      - run:
          name: Run Google APIs test gen
          command: |
            curl -sSL https://github.com/googleapis/googleapis/archive/master.zip > googleapis.zip
            unzip googleapis.zip
            mv googleapis-master googleapis
            export PATH=$PATH:$(pwd)/protobuf/bin
            GOOGLEAPIS=googleapis OUT=$GOPATH/src ./test.sh
  bazel-test:
    environment:
      BAZEL_VERSION: 2.2.0
      PYTHON_VERSION: 3.5.2
    machine: true
    steps:
      - checkout
      - run:
          name: Set Python version
          command: |
            pyenv global ${PYTHON_VERSION}
      - run:
          name: Install Bazel
          command: |
            wget https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh -O bazel_installer.sh
            chmod +x bazel_installer.sh
            ./bazel_installer.sh --user
      - run:
          name: Run tests for repo
          command: |
              bazel test //...
  release:
    docker:
      - image: circleci/golang:1.13
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Make GitHub Release
          command: |
            go run ./util/cmd/release \
              -version=${CIRCLE_TAG} \
              -commitish=${CIRCLE_SHA1} \
              -token=${GITHUB_TOKEN}
      - run:
          name: Build Docker image.
          command: make image
      - run:
          name: Download the GCR credential helper.
          command: |
            curl -fsSL https://github.com/GoogleCloudPlatform/docker-credential-gcr/releases/download/v1.5.0/docker-credential-gcr_linux_amd64-1.5.0.tar.gz \
              | tar xz --to-stdout ./docker-credential-gcr \
              > $GOPATH/bin/docker-credential-gcr && chmod a+x $GOPATH/bin/docker-credential-gcr
      - run:
          name: Set up authentication to Google Container Registry.
          command: |
            echo ${GCLOUD_SERVICE_KEY} | base64 --decode > ${GOOGLE_APPLICATION_CREDENTIALS}
            docker-credential-gcr configure-docker
      - run:
          name: Tag the Docker image and push it to Google Container Registry.
          command: |
            if [ -n "$CIRCLE_TAG" ]; then
              export MAJOR=`echo ${CIRCLE_TAG:1} | awk -F '.' '{ print $1; }'`
              export MINOR=`echo ${CIRCLE_TAG:1} | awk -F '.' '{ print $2; }'`
              export PATCH=`echo ${CIRCLE_TAG:1} | awk -F '.' '{ print $3; }'`
              docker tag gcr.io/gapic-images/gapic-generator-go:latest gcr.io/gapic-images/gapic-generator-go:$MAJOR.$MINOR.$PATCH
              docker tag gcr.io/gapic-images/gapic-generator-go:latest gcr.io/gapic-images/gapic-generator-go:$MAJOR.$MINOR
              docker tag gcr.io/gapic-images/gapic-generator-go:latest gcr.io/gapic-images/gapic-generator-go:$MAJOR
              docker push gcr.io/gapic-images/gapic-generator-go:$MAJOR.$MINOR.$PATCH
              docker push gcr.io/gapic-images/gapic-generator-go:$MAJOR.$MINOR
              docker push gcr.io/gapic-images/gapic-generator-go:$MAJOR
            fi
            docker push gcr.io/gapic-images/gapic-generator-go:latest
