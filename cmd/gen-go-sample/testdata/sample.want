// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// AUTO-GENERATED CODE. DO NOT EDIT.

package main
import(
 "context"
 "flag"
 "fmt"
 "log"

foo "path.to/client/foo"
foopb "path.to/pb/foo"
)
// [START awesome_region]

func sampleMyMethod(theX int64, theB string) error {
	ctx := context.Background()
	c, err := foo.NewClient(ctx)
	if err != nil {
		return err
	}

// theX := 42
// theB := "foobar"
req := &foopb.InputType{
	A: &foopb.AType{
		X: theX,
		Y: 3.14159,
	},
	B: theB,
	E: foopb.AType_FOO,
	Group: &foopb.InputType_F{
		F: "in a oneof",
	},
}
	resp, err := c.MyMethod(ctx, req)
	if err != nil {
		return err
	}

	outA := resp.GetA()
	fmt.Printf("x = %v\n", resp.GetA().GetX())
	fmt.Printf("y = %v\n", outA.GetY())
	for _, r := range resp.GetR() {
		fmt.Printf("resp.r contains %v\n", r)
	}
	return nil
}

// [END awesome_region]

func main() {
	theX := flag.Int64("theX", 42, "")
	theB := flag.String("theB", "foobar", "")
	flag.Parse()
	if err := sampleMyMethod(*theX, *theB); err != nil {
		log.Fatal(err)
	}
}

