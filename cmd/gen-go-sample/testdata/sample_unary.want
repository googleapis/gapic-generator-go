// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package main
import(
 "context"
 "flag"
 "fmt"
 "io/ioutil"
 "log"

foo "path.to/client/foo"
foopb "path.to/pb/foo"
)
// [START awesome_region]

func sampleUnaryMethod(theX int64, theB string, theFoo string, bobFile string) error {
	ctx := context.Background()
	c, err := foo.NewClient(ctx)
	if err != nil {
		return err
	}

	// theX := 42
	// theB := "foobar"
	// theFoo := "myfoo"
	// bobFile := "path/to/local/file/bob.txt"
	dataAlice, err := ioutil.ReadFile("path/to/local/file/alice.txt")
	if err != nil {
		return err
	}

	bobFileBytes, err := ioutil.ReadFile(bobFile)
	if err != nil {
		return err
	}

	req := &foopb.InputType{
		ResourceField: fmt.Sprintf("foos/%s/bars/%s", theFoo, "mybar"),
		A: &foopb.AType{
			X: theX,
			Y: 3.14159,
		},
		B: theB,
		E: foopb.AType_BANANA,
		Group: &foopb.InputType_F{
			F: "in a oneof",
		},
		Bytes: []byte("mybytes"),
		DataAlice: dataAlice,
		DataBob: bobFileBytes,
		AArray: []*foopb.AType{
			&foopb.AType{
				X: 0,
				Y: 1,
			},
			&foopb.AType{
				X: 2,
				Y: 3,
			},
		},
	}
	resp, err := c.UnaryMethod(ctx, req)
	if err != nil {
		return err
	}

	outA := resp.GetA()
	fmt.Printf("x = %v\n", resp.GetA().GetX())
	// outA contains the field y,
	// % is a single percent,
	// and '\n' specifies a newline in comment too
	fmt.Printf("y = %v\n", outA.GetY())
	for _, r := range resp.GetR() {
		fmt.Printf("resp.r contains %v\n", r)
	}
	return nil
}

// [END awesome_region]

func main() {
	theX := flag.Int64("the_x", 42, "")
	theB := flag.String("the_b", "foobar", "")
	theFoo := flag.String("the_foo", "myfoo", "")
	bobFile := flag.String("bob_file", "path/to/local/file/bob.txt", "")
	flag.Parse()
	if err := sampleUnaryMethod(*theX, *theB, *theFoo, *bobFile); err != nil {
		log.Fatal(err)
	}
}

