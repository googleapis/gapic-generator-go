// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

package google.showcase.v1alpha3;

option go_package = "github.com/googleapis/gapic-generator-go/cmd/protoc-gen-go_cli/testdata/showcase/generated;showcase"; 
option java_package = "com.google.showcase.v1alpha3";
option java_multiple_files = true;

// A service to facilitate running discrete sets of tests
// against Showcase.
service Testing {
  option (google.api.default_host) = "localhost:7469";

  // Report on the status of a session.
  // This generates a report detailing which tests have been completed,
  // and an overall rollup.
  rpc ReportSession(ReportSessionRequest) returns (ReportSessionResponse) {
    option (google.api.http) = {
      post: "/v1alpha3/{name=sessions/*}:report"
    };
  }

  // Explicitly decline to implement a test.
  //
  // This removes the test from subsequent `ListTests` calls, and
  // attempting to do the test will error.
  //
  // This method will error if attempting to delete a required test.
  rpc DeleteTest(DeleteTestRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha3/{name=sessions/*/tests/*}"
    };
  }

  // Register a response to a test.
  //
  // In cases where a test involves registering a final answer at the
  // end of the test, this method provides the means to do so.
  rpc RegisterTest(RegisterTestRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1alpha3/{name=sessions/*/tests/*}:register"
    };
  }
}

// Request message for reporting on a session.
message ReportSessionRequest {
  // The session to be reported on.
  string name = 1 [(google.api.resource_reference) = "Session"];
}

// Response message for reporting on a session.
message ReportSessionResponse {
  // The topline state of the report.
  enum State {
    STATE_UNSPECIFIED = 0;

    // The session is complete, and everything passed.
    PASSED = 1;

    // The session had an explicit failure.
    FAILED = 2;

    // The session is incomplete.
    // This is a failure response.
    INCOMPLETE = 3;
  }

  // The state of the report.
  State state = 1;

  // An issue highlighted in the report.
  message Issue {
    // The test that is the root of the issue.
    string test = 1;

    // The different potential types of issues.
    enum Type {
      TYPE_UNSPECIFIED = 0;

      // The test was never instrumented.
      SKIPPED = 1;

      // The test was instrumented, but Showcase got an unexpected
      // value when the generator tried to confirm success.
      INCORRECT_CONFIRMATION = 2;
    }

    // The type of the issue.
    Type type = 2;

    // Severity levels.
    enum Severity {
      SEVERITY_UNSPECIFIED = 0;

      // Errors.
      ERROR = 1;

      // Warnings.
      WARNING = 2;
    }

    // The severity of the issue.
    Severity severity = 3;

    // A description of the issue.
    string description = 4;
  }

  // Issues found which constitute errors.
  // A non-zero list here requires a failure state for the report overall.
  repeated Issue errors = 2;

  // Issues found which do not constitute errors.
  repeated Issue warnings = 3;

  // A message describing the completion level for tests.
  message Completion {
    // The ratio of required and recommended tests completed.
    //
    // The behavior of the denominator for recommended and optional tests
    // matches the description in their individual ratios below.
    float total = 1;

    // The ratio of required tests completed.
    float required = 2;

    // The ratio of recommended tests completed.
    // Deleting a recommended test *does not* remove it from the denominator.
    float recommended = 3;

    // The ratio of optional tests completed.
    // Deleting an optional test *does* remove it from the denominator.
    float optional = 4;
  }

  // The overall completion in the report.
  Completion completion = 4;
}

// Request message for deleting a test.
message DeleteTestRequest {
  // The test to be deleted.
  string name = 1 [(google.api.resource_reference) = "Test"];
}

// Register an answer from a test.
message RegisterTestRequest {
  // The test to have an answer registered to it.
  string name = 1 [(google.api.resource_reference) = "Test"];

  // The answer from the test.
  repeated string answers = 2;
}

// A session is a suite of tests, generally being made in the context
// of testing code generation.
//
// A session defines tests it may expect, based on which version of the
// code generation spec is in use.
message Session {
  // The name of the session. The ID must conform to ^[a-z]+$
  // If this is not provided, Showcase chooses one at random.
  string name = 1 [(google.api.resource).path = "sessions/*"];

  // The specification versions understood by Showcase.
  enum Version {
    VERSION_UNSPECIFIED = 0;

    // The latest v1. Currently, this is v1.0.
    V1_LATEST = 1;

    // v1.0. (Until the spec is "GA", this will be a moving target.)
    V1_0 = 2;
  }

  // Required. The version this session is using.
  Version version = 2;
}


// A test is a single test expected by Showcase.
// The exact way that each test is exercised may vary from test to test.
message Test {
  // The name of the test.
  // The tests/* portion of the names are hard-coded, and do not change
  // from session to session.
  string name = 1 [(google.api.resource).path = "sessions/*/tests/*"];

  // Whether or not a test is required, recommended, or optional.
  enum ExpectationLevel {
    EXPECTATION_LEVEL_UNSPECIFIED = 0;

    // This test is strictly required.
    REQUIRED = 1;

    // This test is recommended.
    //
    // If a generator explicitly ignores a recommended test (see `DeleteTest`),
    // then the report may still pass, but with a warning.
    //
    // If a generator skips a recommended test and does not explicitly
    // express that intention, the report will fail.
    RECOMMENDED = 2;

    // This test is optional.
    //
    // If a generator explicitly ignores an optional test (see `DeleteTest`),
    // then the report may still pass, and no warning will be issued.
    //
    // If a generator skips an optional test and does not explicitly
    // express that intention, the report may still pass, but with a
    // warning.
    OPTIONAL = 3;
  }

  // The expectation level for this test.
  ExpectationLevel expectation_level = 2;

  // A description of the test.
  string description = 3;
}
